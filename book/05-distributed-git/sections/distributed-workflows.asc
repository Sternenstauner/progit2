=== Verteilte Arbeitsabläufe

(((workflows)))
Im Gegensatz zu zentralisierten Versionsverwaltungen (CVCSs) ermöglicht Ihnen der dezentrale Charakter von Git, sehr viel flexibler darin zu sein, wie die Entwicklern bei Projekten zusammenarbeiten.
In zentralisierten Systemen fungieren alle Entwickler als gleichwertige Netzknoten, die mehr oder weniger in der gleichen Art und Weise an einem zentralen Knotenpunkt arbeiten.
In Git dagegen ist jeder Entwickler potentiell beides - Netzknoten und zentraler Knotenpunkt, d. h. jeder Entwickler kann sowohl Code zu anderen Repositories beitragen als auch selbst ein öffentliches Repository unterhalten, auf welchem widerum andere Ihre Arbeit aufbauen und an dem sie mitarbeiten können.
Das eröffnet eine Fülle von möglichen Arbeitsabläufen für Ihr Projekt, weshalb wir einige gebräuchliche Musterbeispiele betrachten werden, welche sich diese Flexibilität zu Nutze machen.
Wir werden auf die Stärken und möglichen Schwächen der einzelnen Entwürfe eingehen; Sie können einen einzelnen davon auswählen, um ihn zu nutzen, oder Sie können die Funktionalitäten von allen miteinander kombinieren.

==== Zentralisierte Arbeitsabläufe

(((workflows, centralized)))
In einem zentralisierten System gibt es im Allgemeinen ein einziges Modell der Zusammenarbeit - der zentralisierte Arbeitsablauf.
Ein zentraler Knotenpunkt (oder Repository) kann Code von anderen akzeptieren und übernehmen, und alle Beteiligten synchronisieren ihre Arbeit damit.
Eine Reihe von Entwicklern sind Netzknoten - Abnehmer von diesem Knotenpunkt - und synchronisieren ihre Arbeit mit diesem einen, zentralen Punkt.

.Zentralisierter Arbeitsablauf.
image::images/centralized_workflow.png[Zentralisierter Arbeitsablauf.]

Das bedeutet, wenn zwei Entwickler ein Repository vom zentralen Knotenpunkt klonen und beide lokal Änderungen vornehmen, dann kann der Entwickler, welcher als erster seine Änderungen ins zentrale Repository hochladen möchte, dies ohne Probleme tun.
Der zweite Entwickler muss jedoch zunächst die Änderungen des ersten Entwicklers bei sich einfließen lassen, bevor er seine eigenen Änderungen hochladen kann, damit er die Änderungen des ersten Entwicklers nicht überschreibt.
Dieses Prinzip ist sowohl für Git zutreffend als auch für Subversion(((Subversion))) (oder irgendein CVCS), und dieses Modell funktioniert bei Git vollkommen einwandfrei.

Wenn Sie in Ihrer Firma oder in Ihrem Team bereits mit einem zentralisierten Arbeitsablauf vertraut sind, können Sie einfach so weitermachen und diesen Arbeitsablauf mit Git realisieren.
Richten Sie einfach ein einziges Repository ein und geben Sie jedem in Ihrem Team Schreibzugriff („push access“). Git sorgt dann dafür, dass niemand die Arbeit von anderen überschreiben kann.
Sagen wir, Jessica und John beginnen mit der Arbeit zur selben Zeit.
John beendet seine Änderungen und lädt diese auf den Server hoch.
Dann versucht Jessica, ihre Änderungen hochzuladen, aber der Server weist diese zurück.
Ihr wird mitgeteilt, dass sie versucht hat, ``non-fast-forward''-Änderungen hochzuladen und dass sie dazu nicht in der Lage ist, bevor sie nicht die Änderungen des anderen Entwicklers heruntergeladen und mit ihren zusammengeführt hat.
Viele Leute mögen diesen Arbeitsablauf, weil sie mit dem Paradigma bereits vertraut sind und sich damit wohl fühlen.

<<<<<<< HEAD
Dies ist auch nicht auf kleine Teams beschränkt. Mit dem Branching-Modell von Git ist es möglich, dass hunderte von Entwicklern an einem einzelnen Projekt mittels dutzenden von Branches gleichzeitig erfolgreich arbeiten.
=======
This is also not limited to small teams.
With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.
>>>>>>> 811dffebd4ff1348819f8acc70f954bd4ad65057

[[_integration_manager]]
==== Arbeitsablauf mit Integrationsmanager

(((workflows, integration manager)))
<<<<<<< HEAD
Weil Git es Ihnen ermöglicht, mehrere entfernte Repositories zu betreiben, ist es möglich, einen Arbeitsablauf zu gestalten, in dem jeder Entwickler Schreibzugriff auf sein eigenes öffentliches Repository hat und Lesezugriff auf die Repositories von allen anderen.
Dieses Szenario beinhaltet häufig ein anerkanntes Repository, welches das ``offizielle'' Projekt darstellt.
Um Änderungen zu einem solchen Projekt beizusteuern, können Sie Ihren eigenen öffentlichen Klon des Projektes anlegen und Ihre Änderungen dorthin hochladen.
Anschließend können Sie den Betreiber des Haupt-Repositories bitten, Ihre Änderungen in sein Repository zu übernehmen.
Der Betreiber kann dann Ihr Repository als ein entferntes Repository auf seinem Rechner hinzufügen, Ihre Änderungen lokal testen, diese in einen seiner Branches einfließen lassen und dann in sein öffentliches Repository hochladen.
Dieser Prozess läuft wie folgt ab (siehe <<wfdiag_b>>):

1.  Der Projektbetreiber lädt in sein öffentliches Repository hoch.
2.  Ein Mitarbeiter klont das Repository und nimmt Änderungen daran vor.
3.  Der Mitarbeiter lädt diese in sein eigenes öffentliches Repository hoch.
4.  Der Mitarbeiter schickt dem Betreiber eine E-Mail und bittet darum, die Änderungen zu übernehmen.
5.  Der Betreiber fügt das Repository des Mitarbeiters als ein entferntes Repository hinzu und führt die Änderungen lokal zusammen.
6.  Der Betreiber lädt die zusammengeführten Änderungen in das Haupt-Repository hoch.
=======
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.
This scenario often includes a canonical repository that represents the ``official'' project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see <<wfdiag_b>>):

1.  The project maintainer pushes to their public repository.
2.  A contributor clones that repository and makes changes.
3.  The contributor pushes to their own public copy.
4.  The contributor sends the maintainer an email asking them to pull changes.
5.  The maintainer adds the contributor's repo as a remote and merges locally.
6.  The maintainer pushes merged changes to the main repository.
>>>>>>> 811dffebd4ff1348819f8acc70f954bd4ad65057

[[wfdiag_b]]
.Arbeitsablauf mit Integrationsmanager.
image::images/integration-manager.png[Arbeitsablauf mit Integrationsmanager.]

(((forking)))
Dies ist ein sehr gewöhnlicher Arbeitsablauf bei hub-basierten Werkzeugen wie GitHub oder GitLab, wo es sehr einfach ist, ein Projekt zu ``forken'' und Ihre Änderungen in Ihren eigenen Fork hochzuladen, wo diese jeder einsehen kann.
Einer der Hauptvorteile dieser Vorgehensweise ist, dass Sie an Ihrem Fork weiterarbeiten können und der Betreiber des Haupt-Repositorys Ihre Änderungen jederzeit übernehmen kann.
Mitarbieter müssen nicht darauf warten, dass der Betreiber ihre Änderungen einarbeitet – jeder Beteiligte kann in seinem eigenen Tempo arbeiten.

==== Arbeitsablauf mit Diktator und Leutnants

(((workflows, dictator and lieutenants)))
<<<<<<< HEAD
Dies ist eine Variante eines Arbeitsablaufs mit vielen Repositories.
Sie wird normalerweise bei sehr großen Projekten mit hunderten von Mitarbeitern verwendet; ein bekanntes Beispiel ist der Linux Kernel.
Verschiedene Integrationsmanager sind zuständig für bestimmte Teile des Repositorys; sie werden Leutnants genannt.
Alle Leutnants haben wiederum einen Integrationsmanager, der als der wohlwollende Diktator (benevolent dictator) bezeichnet wird.
Das Repository des wohlwollenden Diktators dient als das Referenzrepository, aus dem alle Beteiligten ihre eigenen Repositories aktualisieren müssen.
Dieser Prozess funktioniert wie folgt (siehe <<wfdiag_c>>):

1.  Normale Entwickler arbeiten an ihren Themenbranches und fügen Ihre Arbeit an der Spitze des `master`-Branches mittels Rebase ein.
    Der `master`-Branch ist der Branch des Diktators.
2.  Die Leutnants führen die Themenbranches der Entwickler mit ihren `master`-Branches zusammen.
3.  Der Diktator führen die `master`-Branches der Leutnants mit seinem eigenen `master`-Branch zusammen.
4.  Der Diktator lädt seinen `master`-Branch ins Referenzrepository hoch, damit die anderen Entwickler darauf Rebase durchführen können.
=======
This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they're called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator pushes from his directory to a reference repository from which all the collaborators need to pull.
The process works like this (see <<wfdiag_c>>):

1.  Regular developers work on their topic branch and rebase their work on top of `master`.
    The `master` branch is that of the reference directory to which the dictator pushes.
2.  Lieutenants merge the developers' topic branches into their `master` branch.
3.  The dictator merges the lieutenants' `master` branches into their `master` branch.
4.  The dictator pushes their `master` to the reference repository so the other developers can rebase on it.
>>>>>>> 811dffebd4ff1348819f8acc70f954bd4ad65057

[[wfdiag_c]]
.Arbeitsablauf mit wohlwollendem Diktator.
image::images/benevolent-dictator.png[Arbeitsablauf mit wohlwollendem Diktator.]

Diese Art Arbeitsablauf ist nicht weit verbreitet, kann aber bei sehr großen Projekten oder in stark hierarchischen Umgebungen sehr nützlich sein.
Er ermöglicht es dem Projektleiter (dem Diktator), Arbeit in großem Umfang zu delegieren und große Teilbereiche von Code an verschiedenen Punkten einzusammeln, bevor diese integriert werden.

==== Zusammenfassung Arbeitsabläufe

Dies sind einige häufig verwendete Arbeitsabläufe, die mit verteilten Systemen wie Git möglich sind, aber Sie können sehen, dass viele Variationen möglich sind, um genau zu Ihrem speziellen Arbeitsablauf in der realen Welt zu passen.
Jetzt, da Sie (hoffentlich) bestimmen können, welche Kombination von Arbeitsabläufen bei Ihnen funktionieren würde, werden wir einige spezifischere Beispiele davon betrachten, wie man die Hauptaufgaben durchführen kann, welche die unterschliedliche Abläufe ausmachen.
Im nächsten Abschnitt erfahren Sie etwas über gängige Formen der Mitarbeit an einem Projekt.
